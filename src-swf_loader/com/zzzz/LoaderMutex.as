package com.zzzz 
{
	import flash.net.SharedObject;
   
	public class LoaderMutex 
	{
		private static const _name:String = "ad1";
		private static const _interval:Number = 900000;
	  
        public static function save():Boolean
        {
			try
			{
				var so:SharedObject = SharedObject.getLocal(_name, "/");
				so.data.last = new Date();
				so.flush();
CONFIG::debug
{
                LoaderLogging.debug("LoaderMutex.saveTimestamp() success.");
}
			}
			catch (err:Error)
			{
CONFIG::debug
{
                LoaderLogging.debug("LoaderMutex.saveTimestamp() failed: " + err.getStackTrace());
}
				return false;
			}
			
			return true;
        }
		
		// Return true if we may proceed.
		// Return false if not enough time passed.
		public static function isAllowed():Boolean
		{
			try
			{
				var so:SharedObject = SharedObject.getLocal(_name, "/");
				if (so.data.last != null) {
					var current:Date = new Date();
					var last:Date = so.data.last;
					
CONFIG::debug
{
					LoaderLogging.debug("LoaderMutex.loadTimestamp() got " + last + ".");
}
					
					var diff:Number = current.valueOf() - last.valueOf();
					
CONFIG::debug
{
					LoaderLogging.debug("LoaderMutex.loadTimestamp() diff " + diff + ".");
}

					// If interval has not yet passed..
					if (diff < _interval) {
						// return false.
						return false;
					}
				}
			}
			catch (err:Error)
			{
CONFIG::debug
{
                LoaderLogging.debug("LoaderMutex.checkTimestamp() failed: " + err.getStackTrace());
}
			}
			
			return true;
		}
	}
}